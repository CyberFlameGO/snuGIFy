var done = function(data) {
  var hdr;

  var div = document.getElementById('cdiv');
  var canvas = document.getElementById('c');
  var ctx = canvas.getContext('2d');
  var toolbar = document.getElementById('toolbar');

  var tmpCanvas = document.createElement('canvas');

  var transparency = null;
  var delay = null;
  var disposalMethod = null;
  var lastDisposalMethod = null;
  var frame = null;

  var clear = function() {
    transparency = null;
    delay = null;
    lastDisposalMethod = disposalMethod;
    disposalMethod = null;
    frame = null;
    //frame = tmpCanvas.getContext('2d');
  }

  var frames = [];

  var play = (function() {
      var playing = true;
      var forward = true;

      var i = -1;

      var doNextFrame = function() {
        i = (i + 1) % frames.length;
        putFrame();
      };

      var doPrevFrame = function() {
        i = (i + frames.length - 1) % frames.length;
        putFrame();
      };

      var step = (function() {
        var stepping = false;

        var doStep = function() {
          stepping = playing;
          if (!stepping) return;

          forward ? doNextFrame() : doPrevFrame();
          var delay = frames[i].delay * 10;
          if (!delay) delay = 30; // FIXME: Should this even default at all? What should it be?
          setTimeout(doStep, delay);
        };

        return function() { if (!stepping) setTimeout(doStep, 0); };
      }());

      var putFrame = function() {
        ctx.putImageData(frames[i].data, 0, 0);
      }

      var initToolbar = function() {
        // Characters.
        var right = '&#9654;';
        var left = '&#9664;';
        var bar = '&#10073;';
        var rarr = '&rarr;';
        var larr = '&larr;';
        var xsign = '&#10006;';
        // Buttons.
        var playIcon = right;
        var pauseIcon = bar + bar;
        var revplayIcon = left;
        var prevIcon = left + bar;
        var nextIcon = bar + right;
        var revIcon = larr;
        var revrevIcon = rarr;
        var closeIcon = xsign;

        var button = function(cls) {
          var b = document.createElement('button');
          if (cls) b.className = 'jsgif_' + cls;
          return b;
        };

        var rev = button('rev');
        var prev = button('prev');
        var playPause = button('play_pause');
        var next = button('next');
        var close = button('close');

        var updateButtons = function() {
          if (playing) {
            playPause.innerHTML = pauseIcon;
            next.style.visibility = 'hidden';
            prev.style.visibility = 'hidden';
          } else {
            playPause.innerHTML = forward ? playIcon : revplayIcon;
            next.style.visibility = '';
            prev.style.visibility = '';
          }

          rev.innerHTML = forward ? revIcon : revrevIcon;
          prev.innerHTML = prevIcon;
          next.innerHTML = nextIcon;
          close.innerHTML = closeIcon;

          toolbar.innerHTML = '';
          var tools = forward
                    ? [rev, prev, playPause, next, close]
                    : [rev, next, playPause, prev, close];
          tools.forEach(function(t) { toolbar.appendChild(t); });
          //tools.forEach(toolbar.appendChild); // Is this a "pseudo-function"?
        };

        var doRev = function() {
          forward = !forward;
          updateButtons();
          rev.focus(); // (because repack)
        };

        var doPlayPause = function() {
          playing = !playing;
          updateButtons();
          playPause.focus(); // In case this was called by clicking on the
                             // canvas (we have to do this here because we
                             // repack the buttons).
          step();
        };

        var doClose = function() {};

        rev.addEventListener('click', doRev, false);
        prev.addEventListener('click', doPrevFrame, false);
        playPause.addEventListener('click', doPlayPause, false);
        next.addEventListener('click', doNextFrame, false);
        close.addEventListener('click', doClose, false);

        canvas.addEventListener('click', doPlayPause, false);

        updateButtons();
      };

      return function() {
        canvas.width = hdr.width;
        canvas.height = hdr.height;
        setTimeout(initToolbar, 0);
        step();
      };
  }());

  var doGCE = function(gce) {
    pushFrame();
    clear();
    transparency = gce.transparencyGiven ? gce.transparencyIndex : null;
    delay = gce.delayTime;
    disposalMethod = gce.disposalMethod;
    // We don't have much to do with the rest of GCE.
  }

  function doImg(img) {
    if (!frame) frame = tmpCanvas.getContext('2d');
    var ct = img.lctFlag ? img.lct : hdr.gct; // TODO: What if neither exists?

    var cData = frame.getImageData(img.leftPos, img.topPos, img.width, img.height);

    img.pixels.forEach(function(pixel, i) {
      // cData.data[0,1,2,3] == [R,G,B,A] etc.
      if (transparency != pixel) { // This includes null, if no transparency was defined.
        cData.data[i * 4 + 0] = ct[pixel][0];
        cData.data[i * 4 + 1] = ct[pixel][1];
        cData.data[i * 4 + 2] = ct[pixel][2];
        cData.data[i * 4 + 3] = 255; // Opaque.
      } else {
        // TODO: Handle disposal method properly.
        // XXX: When I get to an Internet connection, check which disposal method is which.
        if (lastDisposalMethod == 2 || lastDisposalMethod == 3) {
          cData.data[i * 4 + 3] = 0; // Transparent.
        } else {
          // lastDisposalMethod should be null (no GCE), 0, or 1; leave the pixel as it is.
          // assert(lastDispsalMethod == null || lastDispsalMethod == 0 || lastDispsalMethod == 1);
          // XXX: If this is the first frame (and we *do* have a GCE),
          // lastDispsalMethod will be null, but we want to set undefined
          // pixels to the background color.
        }
      }
    });
    frame.putImageData(cData, img.leftPos, img.topPos);
  }

  var doText = function(text) {
    toolbar.innerHTML = text; // innerText?
    ctx.fillStyle = 'black';
    ctx.font = '32px sans-serif';
    ctx.fillText(text, 8, 32);
  }

  doProgress = function(pos, length) {
    //toolbar.style.display = pos == length ? 'none' : 'block';
    toolbar.style.display = pos == length ? '' : 'block';

    ctx.fillStyle = 'salmon';
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    ctx.fillStyle = 'teal';
    ctx.fillRect(0, 0, (pos / length) * canvas.width, canvas.height);

    doText('Decoding: ' + Math.floor(pos / length * 100) + '%');
  };

  var pushFrame = function() {
    if (!frame) return;
    frames.push({data: frame.getImageData(0, 0, hdr.width, hdr.height),
                 delay: delay});
  };

  var doHdr = function(_hdr) {
    hdr = _hdr;
    canvas.width = hdr.width;
    canvas.height = hdr.height;
    div.style.width = hdr.width + 'px';
    //div.style.height = hdr.height + 'px';
    toolbar.style.minWidth = hdr.width + 'px';

    tmpCanvas.width = hdr.width;
    tmpCanvas.height = hdr.height;
    //if (hdr.gctFlag) { // Fill background.
    //  rgb = hdr.gct[hdr.bgColor];
    //  tmpCanvas.fillStyle = 'rgba(' + rgb[0] + ',' + rgb[1] + ',' + rgb[2] + ',');
    //}
    //tmpCanvas.getContext('2d').fillRect(0, 0, hdr.width, hdr.height);
    // TODO: Figure out the disposal method business.
  };

  var handler = {
    hdr: doHdr,

    ext: {
      gce: doGCE,
      app: {
        NETSCAPE: function(block) {
          // TODO: Is there much point in actually supporting iterations?
        }
      }
    },
    img: doImg,
    eof: function() {
      //toolbar.style.display = '';
      pushFrame();
      play();
    },
    progress: doProgress
  };

  parseGIF(new Stream(data), handler);
};

var run = (function() {
  // TODO: Instead of being variables maybe these should be members.
  var img, parent, div, canvas, toolbar;

  var doGet = function(url, cb) {
    var h = new XMLHttpRequest();
    h.overrideMimeType('text/plain; charset=x-user-defined');
    h.onload = function(e) {
        parseGIF(h.responseText, handler);
    };
    h.onprogress = function(progressEvent) {
      //progress = x;
    };
    h.open("GET", url, true);
    h.send();
  };

  var handler = {
  };

  return function() {
    var imgs = document.getElementsByClassName('img');
    console.assert(imgs.length == 1);

    img = imgs[0];
    parent = img.parentNode;

    div = document.createElement('div');
    canvas = document.createElement('canvas');
    toolbar = document.createElement('div');

    div.className = 'jsgif';
    toolbar.className = 'jsgif_toolbar';
    div.appendChild(canvas);
    div.appendChild(toolbar);

    parent.insertBefore(div, img);
    parent.removeChild(img);

    doGet();
  };
}());




// Generic functions
function bitsToNum(ba) {
  return ba.reduce(function(s, n) { return s * 2 + n; }, 0);
}

Array.prototype.shiftN = function(n) {
  if (n == undefined) {
    return this.shift(); // Will return the element, not a singleton array.
  } else {
    return this.splice(0,n);
  }
}

function byteToBitArr(byte) {
  var a = [];
  for (var i = 7; i >= 0; i--) {
    a.push(!!(byte & (1 << i)));
  }
  return a;
}

// LZW (GIF-specific)
function lzwDecode(minCodeSize, data) {
  var pos = 0;

  function readCode(size) {
    var code = 0;
    for (var i = 0; i < size; i++) {
      if (data.charCodeAt(pos >> 3) & (1 << (pos % 8))) {
        code |= 1 << i;
      }
      pos++;
    }
    return code;
  }

  var output = [];

  var clearCode = 1 << minCodeSize;
  var eoiCode = clearCode + 1;

  var codeSize = minCodeSize + 1;

  var dict = [];

  function clear() {
    dict = [];
    codeSize = minCodeSize + 1;
    for (var i = 0; i < clearCode; i++) {
      dict[i] = [i];
    }
    dict[clearCode] = [];
    dict[eoiCode] = null;

  }

  var code;
  var last;

  while (true) {
    last = code;
    code = readCode(codeSize);

    if (code == clearCode) {
      clear();
      continue;
    }
    if (code == eoiCode) break;

    if (code < dict.length) {
      if (last != clearCode) {
        dict.push(dict[last].concat(dict[code][0]));
      }
    } else {
      console.assert(code == dict.length);
      dict.push(dict[last].concat(dict[last][0]));
    }
    output.push.apply(output, dict[code]);

    if (dict.length == (1 << codeSize) && codeSize < 12) {
      // If we're at the last code and codeSize is 12, the next code will be a clearCode, and it'll be 12 bits long.
      codeSize++;
    }
  }

  console.assert((pos >> 3) + !!(pos % 8) == data.length);
  return output;
}

// Stream
var Stream = function(data) {
  this.data = data;
  this.len = this.data.length;
  this.pos = 0;

  this.read = function(n) {
    if (this.pos + n > this.data.length)
      throw new Error("Attempted to read past end of stream.");
    return this.data.substring(this.pos, this.pos += n);
  }

  this.readToEnd = function() {
    return this.read(this.data.length - this.pos);
  }

  this.readBytes = function(n) {
    var s = this.read(n);
    var a = [];
    for (var i = 0; i < s.length; i++) {
      a.push(s.charCodeAt(i));
    }
    return a;
  }

  this.readByte = function() {
    return this.readBytes(1)[0];
  }

  this.readUnsigned = function() { // Little-endian.
    var a = this.readBytes(2);
    return (a[1] << 8) + a[0];
  }
}

// The actual parsing; returns an object with properties
function parseGIF(data) {
  var gif = {};

  function log() {
    return;
    console.log.apply(this, arguments);
  }

  function logWithPrefix(prefix) {
    return function() { return; };
    return function() {
      var args = Array.prototype.slice.call(arguments);
      var str = args.shift();
      console.log.apply(this, [prefix + str].concat(args));
    }
  }

  var st = new Stream(data);
  gif.blocks = [];

  function parseCT(entries) { // Each entry is 3 bytes, for RGB.
    var ct = [];
    for (var i = 0; i < entries; i++) {
      ct.push(st.readBytes(3));
    }
    return ct;
  }

  function parseHeader() {
    gif.sig = st.read(3);
    gif.ver = st.read(3);
    if (gif.sig != 'GIF') throw new Error('Not a GIF file.');
    log('sig: %s, ver: %s', gif.sig, gif.ver);

    gif.width = st.readUnsigned();
    gif.height = st.readUnsigned();
    log("w×h: %d×%d", gif.width, gif.height);

    var bits = byteToBitArr(st.readByte());
    gif.gctFlag = bits.shift();
    gif.colorRes = bitsToNum(bits.shiftN(3));
    gif.sorted = bits.shift();
    gif.gctSize = bitsToNum(bits.shiftN(3));
    log("gct? %d, colorRes: %d, sorted? %d, gctSize: %d",
          gif.gctFlag, gif.colorRes, gif.sorted, gif.gctSize);

    gif.bgColor = st.readByte();
    gif.pixelAspectRatio = st.readByte(); // if not 0, aspectRatio = (pixelAspectRatio + 15) / 64
    log('bgColor: %d, pixelAspectRatio: %d', gif.bgColor, gif.pixelAspectRatio);

    if (gif.gctFlag) {
      gif.gct = parseCT(1 << (gif.gctSize + 1));
      log('gct read; %d entries', gif.gct.length);
    }
  }

  function parseExt(block) {
    var log = logWithPrefix('  ');

    function parseGCExt(block) {
      var blockSize = st.readByte();
      log('blockSize: %d', blockSize);

      var bits = byteToBitArr(st.readByte());
      block.reserved = bits.shiftN(3); // Reserved; should be 000.
      block.disposalMethod = bitsToNum(bits.shiftN(3));
      block.userInput = bits.shift();
      block.transparencyGiven = bits.shift();
      log('reserved: %d, disposalMethod: %d, userInput: %d, transparencyGiven: %d',
             block.reserved, block.disposalMethod, block.userInput, block.transparencyGiven);

      block.delayTime = st.readUnsigned();
      log('delayTime: %d', block.delayTime);

      //if (block.transparencyGiven) { // TODO verify this needs to be an if
        block.transparencyIndex = st.readByte();
        log('transparencyIndex: %d', block.transparencyIndex);
      //}
      block.terminator = st.readByte();
      log('terminator: %d', block.terminator);
    }

    function parseCommExt(block) {
      block.comBlocks = [];
      while (true) {
        var comBlock = {};
        comBlock.size = st.readByte();
        lzwBlock.data = st.read(comBlock.size);
        block.comBlocks.push(comBlock);
        if (comBlock.size == 0) return;
      }
    }

    function parseAppExt(block) {
      function parseNetscapeExt(block) {
        var blockSize = st.readByte(); // Always 3
        block.unknown = st.readByte() // ??? Always 1? What is this?
        block.iterations = st.readUnsigned();
        block.terminator = st.readByte();
        log('iterations: %d, terminator: %d', block.iterations, block.terminator);
      }
      var blockSize = st.readByte(); // Always 11
      block.identifier = st.read(8);
      block.authCode = st.read(3);
      log('identifier: %s, authCode: %s', block.identifier, block.authCode);
      switch (block.identifier + block.authCode) {
        case 'NETSCAPE2.0':
          log('NETSCAPE');
          parseNetscapeExt(block);
          break;
        default:
          throw new Error("Unknown Application Extension: " + block.identifier);
          break;
      }
    }

    block.label = st.readByte();
    switch (block.label) {
      case 0xF9:
        block.extType = 'gce';
        log('Graphics Control Extension');
        parseGCExt(block);
        break;
      case 0xFE:
        block.extType = 'com';
        log('Comment Extension')
          parseCommExt(block);
        break;
      case 0xFF:
        block.extType = 'app';
        log('Application Extension');
        parseAppExt(block);
        break;
      case 0x01:
        throw new Error("Plain Text extension (0x01) unsupported")
        break;
      default:
        throw new Error("Unknown extension: 0x" + label.toString(16));
        break;
    }
  }

  function parseImg(block) {
    var log = logWithPrefix('  ');

    block.leftPos = st.readUnsigned();
    block.topPos = st.readUnsigned();
    block.width = st.readUnsigned();
    block.height = st.readUnsigned();
    log('left: %d, top: %d, width: %d, height: %d',
          block.leftPos, block.topPos, block.width, block.height);

    var bits = byteToBitArr(st.readByte());
    block.lctFlag = bits.shift();
    block.interlace = bits.shift();
    block.sorted = bits.shift();
    block.reserved = bits.shiftN(2);
    block.lctSize = bits.shiftN(3);
    log('lct? %d, interlace? %d, sorted? %d, reserved: %d, lctSize: %d',
          block.lctFlag, block.interlace, block.sorted, block.reserved, block.lctSize);

    if (block.lctFlag) {
      block.lct = parseCT(1 << (block.lctSize + 1));
      log('lct read; %d entries', block.lct.length);
    }

    block.lzwMinCodeSize = st.readByte();
    block.lzwBlocks = [];
    while (true) { // TODO: The same thing is done elsewhere; abstract it.
      var lzwBlock = {};
      lzwBlock.size = st.readByte();
      lzwBlock.data = st.read(lzwBlock.size);
      block.lzwBlocks.push(lzwBlock);
      if (lzwBlock.size == 0) break; // Do we want to push the terminator?
    } // TODO: Do we want to return lzwBlocks at all, or just the pixel data?
    var lzwData = block.lzwBlocks.reduce(function(s, n) { return s + n.data; }, '');
    block.pixels = lzwDecode(block.lzwMinCodeSize, lzwData);
  }

  function parseBlocks() {
    var block = {};
    while (block.type != 'eof') {
      block = {};
      block.sentinel = st.readByte();
      switch (String.fromCharCode(block.sentinel)) { // For ease of matching
        case '!':
          block.type = 'ext';
          log('Extension block:');
          parseExt(block);
          break;
        case ',':
          log('Image block:');
          block.type = 'img';
          parseImg(block);
          break;
        case ';':
          block.type = 'eof';
          log('Trailer (;) reached!');
          break;
        default:
          throw new Error("Unknown block: 0x" + block.sentinel.toString(16));
      }
      gif.blocks.push(block);
    }
  }

  function parse() {
    parseHeader();
    parseBlocks();
  }

  parse();
  return gif;
}


// runish

var tiny_gif = "GIF89a\x01\x00\x01\x00\x80\x00\x00\xFF\xFF\xFF\x00\x00\x00!\xF9\x04\x01\x00\x00\x00\x00,\x00\x00\x00\x00\x01\x00\x01\x00\x00\x02\x02D\x01\x00;";
//var wiki_gif = fs.readFileSync('GifSample.gif').toString();


if (typeof exports != 'undefined') {
  exports.parseGIF = parseGIF;
}
